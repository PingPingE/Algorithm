-- 최근 풀이: 길어도 좀 더 직관적임 - 베이스 테이블(T)만들고 거기에 다 left join

with Doctor as (
    select row_number() over(order by name asc) as id , name  from occupations where occupation = "Doctor" 
)
, Professor as (
     select row_number() over(order by name asc) as id , name from occupations where occupation = "Professor" 
)
, Singer as (
    select row_number() over(order by name asc) as id , name from occupations where occupation = "Singer" 
)
, Actor as (
   select row_number() over(order by name asc) as id , name from occupations where occupation = "Actor" 
)
, T as (
    select distinct id from (
    select id from Doctor as D
    union select id from Professor as P
    union select id as id from Singer as S
    union select id as id from Actor as A
                         ) as tmp
    )

(select D.name, P.name, S.name, A.name  from
T
left join Doctor as D on T.id = D.id
left join Professor as P on T.id = P.id
left join Singer as S on T.id = S.id
left join Actor as A on T.id = A.id
 )



-- 과거 풀이: 엄청 복잡하게 풀었네
-- https://www.hackerrank.com/challenges/occupations/problem
-- https://www.hackerrank.com/challenges/occupations/forum 참고

-- 행과 열 모두 출력하기 위해서 RowN으로 행 구분, 열은 각 직업별로 생성해서 구분
-- select에 max([직업])을 해준 이유는 group by RowN으로 행 구분을 했기 때문에 그냥 아무 집계함수 적은거(단, sum,avg,count등은 X)

set @r1=0, @r2=0, @r3=0, @r4=0;
select max(Doctor), max(Professor), max(Singer), max(Actor)
from(
    select 

	-- 각 직업별로 순서 부여
	-- window함수의 row_num을 부여하는 것과 같음(partition by occupation order by name) 
        case when occupation='Doctor' then (@r1:=@r1+1)
             when occupation='Professor' then (@r2:=@r2+1)
             when occupation='Singer' then (@r3:=@r3+1)
             when occupation='Actor' then (@r4:=@r4+1)
        end RowN,

	-- 컬럼을 각 직업별로 생성(근데 직업이 엄청 많으면 너무 비효율적인데 다른 방법은..?)
        case when occupation='Doctor' then name end Doctor,
        case when occupation='Professor' then name end Professor,
        case when occupation='Singer' then name end Singer,
        case when occupation='Actor' then name end Actor
    from occupations
    order by name
)tmp
group by RowN

