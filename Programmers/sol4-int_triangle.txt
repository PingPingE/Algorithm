check = []#초기: -1, 지나가면서 최댓값 저장
board = []#실제 값
def solution(triangle):
    global check,board
    board = [[] for _ in range(len(triangle))]
    for i in range(len(triangle)): #열
        board[i]= [triangle[j][i] for j in range(i,len(triangle))]
    for _ in range(len(board[0]),0,-1):
        check.append([-1 for __ in range(_)])
    sol(0,0)
    return check[0][0]
def sol(y,x):
    global check,board
    if y>=len(board) or x>=len(board[y]):
        return 0
    if check[y][x] == -1:
        check[y][x] = board[y][x] + max(sol(y+1,x), sol(y,x+1))
    return check[y][x]
       

정확성  테스트
테스트 1 〉	통과 (0.07ms, 10.8MB)
테스트 2 〉	통과 (0.10ms, 10.7MB)
테스트 3 〉	통과 (0.16ms, 10.8MB)
테스트 4 〉	통과 (0.48ms, 10.7MB)
테스트 5 〉	통과 (4.65ms, 11.3MB)
테스트 6 〉	통과 (0.92ms, 11MB)
테스트 7 〉	통과 (3.10ms, 11.2MB)
테스트 8 〉	통과 (0.72ms, 10.7MB)
테스트 9 〉	통과 (0.07ms, 10.6MB)
테스트 10 〉	통과 (0.44ms, 10.6MB)
효율성  테스트
테스트 1 〉	통과 (102.85ms, 87MB)
테스트 2 〉	통과 (79.60ms, 69.9MB)
테스트 3 〉	통과 (118.27ms, 97.7MB)
테스트 4 〉	통과 (99.47ms, 88.1MB)
테스트 5 〉	통과 (98.02ms, 82.6MB)
테스트 6 〉	통과 (120.29ms, 99.9MB)
테스트 7 〉	통과 (112.85ms, 93.3MB)
테스트 8 〉	통과 (93.59ms, 79MB)
테스트 9 〉	통과 (97.90ms, 83MB)
테스트 10 〉	통과 (114.42ms, 95MB)