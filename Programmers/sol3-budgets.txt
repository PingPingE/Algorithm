def search(L,R,budgets,M): #재귀
    if L>R:
        return R
    mid = (L+R)//2
    total = 0
    for e,b in enumerate(budgets):
        if b<mid:
            total += b
        else:
            total += mid*(len(budgets)-e)
            break
    if total <= M:
        return search(mid+1, R, budgets,M)
    else:
        return search(L,mid-1,budgets,M)
def solution(budgets, M):
    if sum(budgets) <=M:
        return max(budgets)
    budgets.sort()
    return search(1,budgets[-1], budgets, M)

정확성  테스트
테스트 1 〉	통과 (0.04ms, 10.6MB)
테스트 2 〉	통과 (0.03ms, 10.7MB)
테스트 3 〉	통과 (0.04ms, 10.7MB)
테스트 4 〉	통과 (0.06ms, 10.6MB)
테스트 5 〉	통과 (0.06ms, 10.6MB)
테스트 6 〉	통과 (0.07ms, 10.8MB)
테스트 7 〉	통과 (0.03ms, 10.5MB)
테스트 8 〉	통과 (0.04ms, 10.7MB)
테스트 9 〉	통과 (0.05ms, 10.7MB)
테스트 10 〉	통과 (0.03ms, 10.7MB)
테스트 11 〉	통과 (0.05ms, 10.8MB)
테스트 12 〉	통과 (0.08ms, 10.5MB)
테스트 13 〉	통과 (0.03ms, 10.7MB)
테스트 14 〉	통과 (0.12ms, 10.8MB)
테스트 15 〉	통과 (0.04ms, 10.6MB)
효율성  테스트
테스트 1 〉	통과 (0.10ms, 11MB)
테스트 2 〉	통과 (21.15ms, 50.5MB)
테스트 3 〉	통과 (6.69ms, 12MB)
테스트 4 〉	통과 (0.12ms, 10.9MB)
테스트 5 〉	통과 (0.22ms, 11.4MB)