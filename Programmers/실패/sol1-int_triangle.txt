answer = -1
remain = 0
maxx = {}
def solution(triangle):
    global answer, remain,maxx
    for i in range(len(triangle)): #각 행의 최댓값의 합
        remain += max(triangle[i])
        maxx[i%(len(triangle))] = remain
    sol(0,0,0,triangle)
    return answer

def sol(cur_i, cur_j, cur_res, triangle):
    global answer,maxx,remain
    if answer >= cur_res+maxx[cur_i]:
        return 0
    if cur_i == len(triangle)-1:
        answer = max(answer, cur_res+triangle[cur_i][cur_j])
        return cur_res + triangle[cur_i][cur_j]
    return max(sol(cur_i+1, cur_j, cur_res+triangle[cur_i][cur_j], triangle), sol(cur_i+1, cur_j+1, cur_res+triangle[cur_i][cur_j], triangle))
    
정확성  테스트
테스트 1 〉	통과 (0.05ms, 10.7MB)
테스트 2 〉	실패 (0.24ms, 10.8MB)
테스트 3 〉	통과 (0.57ms, 10.7MB)
테스트 4 〉	실패 (63.82ms, 10.8MB)
테스트 5 〉	실패 (시간 초과)
테스트 6 〉	실패 (8086.55ms, 10.9MB)
테스트 7 〉	실패 (시간 초과)
테스트 8 〉	실패 (491.57ms, 10.8MB)
테스트 9 〉	통과 (0.06ms, 10.8MB)
테스트 10 〉	실패 (31.80ms, 10.8MB)
효율성  테스트
테스트 1 〉	실패 (시간 초과)
테스트 2 〉	실패 (시간 초과)
테스트 3 〉	실패 (시간 초과)
테스트 4 〉	실패 (시간 초과)
테스트 5 〉	실패 (시간 초과)
테스트 6 〉	실패 (시간 초과)
테스트 7 〉	실패 (시간 초과)
테스트 8 〉	실패 (시간 초과)
테스트 9 〉	실패 (시간 초과)
테스트 10 〉실패 (시간 초과)
