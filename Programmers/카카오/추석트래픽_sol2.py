'''
추석 트래픽
이번 추석에도 시스템 장애가 없는 명절을 보내고 싶은 어피치는 서버를 증설해야 할지 고민이다. 장애 대비용 서버 증설 여부를 결정하기 위해 작년 추석 기간인 9월 15일 로그 데이터를 분석한 후 초당 최대 처리량을 계산해보기로 했다. 초당 최대 처리량은 요청의 응답 완료 여부에 관계없이 임의 시간부터 1초(=1,000밀리초)간 처리하는 요청의 최대 개수를 의미한다.

입력 형식
solution 함수에 전달되는 lines 배열은 N(1 ≦ N ≦ 2,000)개의 로그 문자열로 되어 있으며, 각 로그 문자열마다 요청에 대한 응답완료시간 S와 처리시간 T가 공백으로 구분되어 있다.
응답완료시간 S는 작년 추석인 2016년 9월 15일만 포함하여 고정 길이 2016-09-15 hh:mm:ss.sss 형식으로 되어 있다.
처리시간 T는 0.1s, 0.312s, 2s 와 같이 최대 소수점 셋째 자리까지 기록하며 뒤에는 초 단위를 의미하는 s로 끝난다.
예를 들어, 로그 문자열 2016-09-15 03:10:33.020 0.011s은 2016년 9월 15일 오전 3시 10분 **33.010초**부터 2016년 9월 15일 오전 3시 10분 **33.020초**까지 **0.011초** 동안 처리된 요청을 의미한다. (처리시간은 시작시간과 끝시간을 포함)
서버에는 타임아웃이 3초로 적용되어 있기 때문에 처리시간은 0.001 ≦ T ≦ 3.000이다.
lines 배열은 응답완료시간 S를 기준으로 오름차순 정렬되어 있다.
출력 형식
solution 함수에서는 로그 데이터 lines 배열에 대해 초당 최대 처리량을 리턴한다.
'''

def solution(lines):
    start,end = [],[]#시작시간, 완료시간 담기 
    for i in lines:
        date, time,ms = i.split(' ')
        h,m,s =time.split(':')
        ms = float(ms.split('s')[0])
        total = int(h)*3600 + int(m)*60 + float(s)
        end.append(total)
        start.append(total-(ms-0.001))
    max_cnt = 0
    for k in range(len(start)): #start, end 각각 인덱스로 접근
        s = start[k]
        e = end[k]
        cnt = 0
        for i in range(len(start)): #시작시간 기준
            #모든 로그 데이터 중 시작시간 or 완료시간이 범위 내에 있거나 시작시간은 더 빠르고 완료시간은 더 이후인 경우 count
            if s<= start[i] < s+1 or s<= end[i] < s+1 or (start[i]<s and s+1<end[i]) :
                cnt += 1
        max_cnt = max(max_cnt, cnt)
        cnt = 0
        for i in range(len(start)):#완료시간 기준
            if e<= start[i] <e+1 or e<= end[i] < e+1 or (start[i]<e and e+1<end[i]) :
                 cnt += 1
        max_cnt = max(max_cnt, cnt)
    return max_cnt

'''
정확성  테스트
테스트 1 〉	통과 (0.13ms, 9.68MB)
테스트 2 〉	통과 (461.18ms, 9.79MB)
테스트 3 〉	통과 (439.13ms, 9.73MB)
테스트 4 〉	통과 (0.05ms, 9.78MB)
테스트 5 〉	통과 (4.45ms, 9.87MB)
테스트 6 〉	통과 (4.40ms, 9.79MB)
테스트 7 〉	통과 (462.73ms, 9.77MB)
테스트 8 〉	통과 (462.19ms, 9.8MB)
테스트 9 〉	통과 (5.48ms, 9.71MB)
테스트 10 〉	통과 (0.09ms, 9.81MB)
테스트 11 〉	통과 (0.11ms, 9.81MB)
테스트 12 〉	통과 (463.60ms, 9.74MB)
테스트 13 〉	통과 (4.87ms, 9.69MB)
테스트 14 〉	통과 (0.05ms, 9.78MB)
테스트 15 〉	통과 (0.04ms, 9.84MB)
테스트 16 〉	통과 (0.04ms, 9.85MB)
테스트 17 〉	통과 (0.04ms, 9.77MB)
테스트 18 〉	통과 (1677.00ms, 9.98MB)
테스트 19 〉	통과 (1896.88ms, 9.94MB)
테스트 20 〉	통과 (1893.79ms, 9.95MB)
테스트 21 〉	통과 (0.04ms, 9.75MB)
테스트 22 〉	통과 (0.05ms, 9.77MB)
'''