'''
문제 설명
[본 문제는 정확성과 효율성 테스트 각각 점수가 있는 문제입니다.]

밤늦게 귀가할 때 안전을 위해 항상 택시를 이용하던 무지는 최근 야근이 잦아져 택시를 더 많이 이용하게 되어 택시비를 아낄 수 있는 방법을 고민하고 있습니다.
"무지"는 자신이 택시를 이용할 때 동료인 어피치 역시 자신과 비슷한 방향으로 가는 택시를 종종 이용하는 것을 알게 되었습니다.
"무지"는 "어피치"와 귀가 방향이 비슷하여 택시 합승을 적절히 이용하면 택시요금을 얼마나 아낄 수 있을 지 계산해 보고 "어피치"에게 합승을 제안해 보려고 합니다.

[문제]
지점의 개수 n, 출발지점을 나타내는 s, A의 도착지점을 나타내는 a, B의 도착지점을 나타내는 b,
지점 사이의 예상 택시요금을 나타내는 fares가 매개변수로 주어집니다.
이때, A, B 두 사람이 s에서 출발해서 각각의 도착 지점까지 택시를 타고 간다고 가정할 때, 최저 예상 택시요금을 계산해서
return 하도록 solution 함수를 완성해 주세요.
만약, 아예 합승을 하지 않고 각자 이동하는 경우의 예상 택시요금이 더 낮다면, 합승을 하지 않아도 됩니다.

[제한사항]
지점갯수 n은 3 이상 200 이하인 자연수입니다.
지점 s, a, b는 1 이상 n 이하인 자연수이며, 각기 서로 다른 값입니다.
즉, 출발지점, A의 도착지점, B의 도착지점은 서로 겹치지 않습니다.
fares는 2차원 정수 배열입니다.
fares 배열의 크기는 2 이상 n x (n-1) / 2 이하입니다.
예를들어, n = 6이라면 fares 배열의 크기는 2 이상 15 이하입니다. (6 x 5 / 2 = 15)
fares 배열의 각 행은 [c, d, f] 형태입니다.
c지점과 d지점 사이의 예상 택시요금이 f원이라는 뜻입니다.
지점 c, d는 1 이상 n 이하인 자연수이며, 각기 서로 다른 값입니다.
요금 f는 1 이상 100,000 이하인 자연수입니다.
fares 배열에 두 지점 간 예상 택시요금은 1개만 주어집니다. 즉, [c, d, f]가 있다면 [d, c, f]는 주어지지 않습니다.
출발지점 s에서 도착지점 a와 b로 가는 경로가 존재하는 경우만 입력으로 주어집니다.

'''
import heapq
from collections import defaultdict
def solution(n, s, a, b, fares): #들릴 수 있는 지점 수, 시작,목적지1, 목적지2, 각 지점 to 지점 cost
    INF=987654321
    answer =0
    dic = defaultdict(list)

    for f in fares:
        d1,d2,cost = f
        dic[d1].append((d2,cost))
        dic[d2].append((d1,cost))
    res = {}

    for start in [s,a,b]: #시작점/ 목적지1/ 목적지2에서 모든 지점까지의 최소비용 구하기
        costs =[INF for _ in range(n+1)]
        heap = []
        heapq.heapify(heap)
        costs[start] = 0
        heapq.heappush(heap,(0,start))
        while heap:
            cur_cost, cur_d  = heapq.heappop(heap)
            for c in dic[cur_d]:
                tmp = cur_cost+c[1]
                if  tmp < costs[c[0]]:
                    costs[c[0]] = tmp
                    heapq.heappush(heap, (tmp, c[0]))
        res[start] = costs[:]

    mini = INF
    for i in range(1,n+1):
        if i== a:
            mini = min(mini,res[s][a]+res[a][b]) #시작점 -> 목적지1 -> 목적지2
        elif i==b:
            mini = min(mini, res[s][b]+res[b][a]) #시작점 -> 목적지2 -> 목적지1
        else:
            mini = min(mini, res[s][i]+res[a][i]+res[b][i]) #시작점 -> 어떤 지점(시작점인 경우 첨부터 따로) -> 목적지1과 목적지2 따로
    return mini

'''
정확성  테스트
테스트 1 〉	통과 (0.90ms, 10.3MB)
테스트 2 〉	통과 (0.19ms, 10.3MB)
테스트 3 〉	통과 (0.04ms, 10.4MB)
테스트 4 〉	통과 (0.40ms, 10.3MB)
테스트 5 〉	통과 (0.08ms, 10.5MB)
테스트 6 〉	통과 (0.12ms, 10.3MB)
테스트 7 〉	통과 (0.13ms, 10.4MB)
테스트 8 〉	통과 (0.14ms, 10.3MB)
테스트 9 〉	통과 (0.15ms, 10.3MB)
테스트 10 〉	통과 (0.15ms, 10.3MB)
효율성  테스트
테스트 1 〉	통과 (1.71ms, 10.3MB)
테스트 2 〉	통과 (5.77ms, 10.7MB)
테스트 3 〉	통과 (1.34ms, 10.3MB)
테스트 4 〉	통과 (1.38ms, 10.3MB)
테스트 5 〉	통과 (1.32ms, 10.3MB)
테스트 6 〉	통과 (1.34ms, 10.4MB)
테스트 7 〉	통과 (70.04ms, 15.5MB)
테스트 8 〉	통과 (69.54ms, 15.6MB)
테스트 9 〉	통과 (21.19ms, 15.6MB)
테스트 10 〉	통과 (22.05ms, 15.5MB)
테스트 11 〉	통과 (23.44ms, 15.5MB)
테스트 12 〉	통과 (31.81ms, 13MB)
테스트 13 〉	통과 (31.98ms, 12.9MB)
테스트 14 〉	통과 (31.12ms, 12.9MB)
테스트 15 〉	통과 (29.09ms, 12.9MB)
테스트 16 〉	통과 (1.22ms, 10.4MB)
테스트 17 〉	통과 (1.35ms, 10.3MB)
테스트 18 〉	통과 (1.37ms, 10.3MB)
테스트 19 〉	통과 (2.82ms, 10.6MB)
테스트 20 〉	통과 (5.76ms, 10.7MB)
테스트 21 〉	통과 (5.78ms, 10.7MB)
테스트 22 〉	통과 (32.59ms, 12.9MB)
테스트 23 〉	통과 (31.58ms, 13MB)
테스트 24 〉	통과 (35.82ms, 12.9MB)
테스트 25 〉	통과 (0.99ms, 10.3MB)
테스트 26 〉	통과 (2.05ms, 10.3MB)
테스트 27 〉	통과 (5.18ms, 10.4MB)
테스트 28 〉	통과 (4.95ms, 10.6MB)
테스트 29 〉	통과 (1.01ms, 10.3MB)
테스트 30 〉	통과 (1.06ms, 10.2MB)
'''