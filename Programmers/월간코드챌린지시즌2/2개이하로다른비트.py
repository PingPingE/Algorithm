'''
문제 설명
양의 정수 x에 대한 함수 f(x)를 다음과 같이 정의합니다.

x보다 크고 x와 비트가 1~2개 다른 수들 중에서 제일 작은 수
예를 들어,

f(2) = 3 입니다. 다음 표와 같이 2보다 큰 수들 중에서 비트가 다른 지점이 2개 이하이면서 제일 작은 수가 3이기 때문입니다.
수	비트	다른 비트의 개수
2	000...0010
3	000...0011	1
f(7) = 11 입니다. 다음 표와 같이 7보다 큰 수들 중에서 비트가 다른 지점이 2개 이하이면서 제일 작은 수가 11이기 때문입니다.
수	비트	다른 비트의 개수
7	000...0111
8	000...1000	4
9	000...1001	3
10	000...1010	3
11	000...1011	2
정수들이 담긴 배열 numbers가 매개변수로 주어집니다. numbers의 모든 수들에 대하여 각 수의 f 값을 배열에 차례대로 담아 return 하도록 solution 함수를 완성해주세요.

제한사항
1 ≤ numbers의 길이 ≤ 100,000
0 ≤ numbers의 모든 수 ≤ 1015

입출력 예
numbers	result
[2,7]	[3,11]
'''

def solution(numbers):
    ans=[]
    for n1 in numbers:
        n2=n1+1
        while True:
            if diff_cnt(n1^n2)<3:
                ans.append(n2)
                break
            n2+=1
    return ans

def diff_cnt(n):
    cnt=0
    while n:
        if n&1:
            cnt+=1
            #break 조건 추가
            if cnt >= 3:
                break
        n>>=1
    return cnt


'''
정확성  테스트
테스트 1 〉	통과 (2.22ms, 10.3MB)
테스트 2 〉	통과 (439.22ms, 26.2MB)
테스트 3 〉	통과 (0.85ms, 10.1MB)
테스트 4 〉	통과 (1.88ms, 10.3MB)
테스트 5 〉	통과 (8.15ms, 10.2MB)
테스트 6 〉	통과 (5.20ms, 10.3MB)
테스트 7 〉	통과 (784.03ms, 26.5MB)
테스트 8 〉	통과 (310.57ms, 26.2MB)
테스트 9 〉	통과 (586.96ms, 25.6MB)
테스트 10 〉	실패 (시간 초과)
테스트 11 〉	실패 (시간 초과)
채점 결과
정확성: 81.8
합계: 81.8 / 100.0
'''
'''
======break 조건 추가 후
정확성  테스트
테스트 1 〉	통과 (2.97ms, 10.3MB)
테스트 2 〉	통과 (269.33ms, 26.2MB)
테스트 3 〉	통과 (0.54ms, 10.2MB)
테스트 4 〉	통과 (1.93ms, 10.2MB)
테스트 5 〉	통과 (5.45ms, 10.4MB)
테스트 6 〉	통과 (3.21ms, 10.5MB)
테스트 7 〉	통과 (372.23ms, 26.5MB)
테스트 8 〉	통과 (212.72ms, 25.9MB)
테스트 9 〉	통과 (310.84ms, 25.6MB)
테스트 10 〉	실패 (시간 초과)
테스트 11 〉	실패 (시간 초과)
채점 결과
정확성: 81.8
합계: 81.8 / 100.0
'''