from collections import deque
def solution(triangle):
    answer = -1
    remain = 0
    maxx = {}
    for i in range(len(triangle)): #각 행의 최댓값의 합
        maxx[i] = max(triangle[i])
        remain += maxx[i]

    que = deque()
    que.append([0,0,0])#i,j,cur_res
    while que:
        i,j,cur = que.popleft()
        if i == len(triangle)-1:
            answer = max(answer, cur+triangle[i][j])
            continue
        if cur+sum(maxx[m] for m in range(i,len(triangle))) <= answer:
            continue

        que.append([i+1, j+1, cur+triangle[i][j]])
        que.append([i+1, j, cur+triangle[i][j]])

    return answer

정확성  테스트
테스트 1 〉	통과 (0.08ms, 10.7MB)
테스트 2 〉	통과 (0.73ms, 10.7MB)
테스트 3 〉	통과 (25.67ms, 12.4MB)
테스트 4 〉	실패 (시간 초과)
테스트 5 〉	실패 (시간 초과)
테스트 6 〉	실패 (시간 초과)
테스트 7 〉	실패 (시간 초과)
테스트 8 〉	실패 (시간 초과)
테스트 9 〉	통과 (0.13ms, 10.7MB)
테스트 10 〉	실패 (시간 초과)
효율성  테스트
테스트 1 〉	실패 (시간 초과)
테스트 2 〉	실패 (시간 초과)
테스트 3 〉	실패 (시간 초과)
테스트 4 〉	실패 (시간 초과)
테스트 5 〉	실패 (시간 초과)
테스트 6 〉	실패 (시간 초과)
테스트 7 〉	실패 (시간 초과)
테스트 8 〉	실패 (시간 초과)
테스트 9 〉	실패 (시간 초과)
테스트 10 〉	실패 (시간 초과)
채점 결과
정확성: 32.1
효율성: 0.0
합계: 32.1 / 100.0